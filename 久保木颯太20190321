//BoundScript1.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BoundScript1 : MonoBehaviour {


        private Rigidbody sphere;//バウンドさせたいオブジェクトを宣言

        //sphereに触れた時のメソッド
        private void OnCollisionEnter(Collision collision)
        {
            //Y軸方向に常に同じ力を与える
            sphere.AddForce(Vector3.up * 10f, ForceMode.Impulse);
        }
        // Use this for initialization
        void Start () {
		
	}
	
	// Update is called once per frame
	void Update () {
		
	}
}











//BulletTest.cs

using UnityEngine;
using System.Collections;

public class BulletTest : MonoBehaviour
{

    [SerializeField] private float power = 50f;
    [SerializeField] private float deleteTime = 10f;
    private Rigidbody rigid;
    private Ray ray;
    public AudioClip audioClip;
    AudioSource audioSource;

    void Awake()
    {

        audioSource = gameObject.GetComponent<AudioSource>();
        audioSource.clip = audioClip;
        //　Rigidbodyを取得し速度を0に初期化
        rigid = GetComponent<Rigidbody>();
    }

    //　弾がアクティブになった時
    void OnEnable()
    {

        //　カメラからクリックした位置にレイを飛ばす
        ray = Camera.main.ScreenPointToRay(Input.mousePosition);

        //球に重力を持たせる
       // rigid.AddForce(ray.direction * power, ForceMode.Force);

        //　弾を発射してから指定した時間が経過したら自動で削除
        Destroy(this.gameObject, deleteTime);
    }

    void OnCollisionEnter(Collision col)
    {
        // Enemyタグがついた敵に衝突したら自身と敵を削除
        if (col.gameObject.CompareTag("Enemy"))
        {
            audioSource.Play();
            Destroy(this.gameObject);
            Destroy(col.gameObject);
           
        } 
    }
    void FixedUpdate()
    {
        rigid.AddForce(ray.direction * power, ForceMode.Force);
    }
}












//CameraMover.cs

using UnityEngine;

public class CameraMover : MonoBehaviour
{

    Rigidbody _rb;
    public bool isUseCameraDirection;    // カメラの向きに合わせて移動させたい場合はtrue
    public float moveSpeed;              // 移動速度
    public float moveForceMultiplier;    // 移動速度の入力に対する追従度
    public GameObject mainCamera;
    float _horizontalInput;
    float _verticalInput;
   
    void Start()
    {
        _rb = GetComponent<Rigidbody>();

        if (mainCamera == null)
            mainCamera = GameObject.FindGameObjectWithTag("MainCamera");
    }

    void Update()
    {
        //上下左右キーで歩き表現
        _horizontalInput = Input.GetAxis("Horizontal");
        if (Input.GetKey(KeyCode.UpArrow))
        {
            transform.position = new Vector3(transform.position.x, Mathf.PingPong(Time.time, (float)0.7), transform.position.z);
        }
        if (Input.GetKey(KeyCode.DownArrow))
        {
            transform.position = new Vector3(transform.position.x, Mathf.PingPong(Time.time, (float)0.7), transform.position.z);
        }

        _verticalInput = Input.GetAxis("Vertical");
        if (Input.GetKey(KeyCode.RightArrow))
        {
            transform.position = new Vector3(transform.position.x, Mathf.PingPong(Time.time, (float)0.5), transform.position.z);
        }

        if (Input.GetKey(KeyCode.LeftArrow))
        {
            transform.position = new Vector3(transform.position.x, Mathf.PingPong(Time.time, (float)0.5), transform.position.z);
        }


    }

    void FixedUpdate()
    {
        Vector3 moveVector = Vector3.zero;    // 移動速度の入力

        if (isUseCameraDirection)
        {
            Vector3 cameraForward = mainCamera.transform.forward;
            Vector3 cameraRight = mainCamera.transform.right;
            cameraForward.y = 0.0f;    // 水平方向に移動させたい場合はy方向成分を0にする
            cameraRight.y = 0.0f;

            moveVector = moveSpeed * (cameraRight.normalized * _horizontalInput + cameraForward.normalized * _verticalInput);
        }
        else
        {
            moveVector.x = moveSpeed * _horizontalInput;
            moveVector.z = moveSpeed * _verticalInput;
        }

        _rb.AddForce(moveForceMultiplier * (moveVector - _rb.velocity));
    }
}















//CountDownTmer.cs

using UnityEngine;
using System.Collections;
using UnityEngine.UI;

public class CountDownTimer : MonoBehaviour
{

    //　トータル制限時間
    private float totalTime;
    //　制限時間（分）
    [SerializeField]
    private int minute;
    //　制限時間（秒）
    [SerializeField]
    private float seconds;
    //　前回Update時の秒数
    private float oldSeconds;
    private Text timerText;
    public GameObject GameOver;
    private Text text;
    void Start()
    {
        totalTime = minute * 60 + seconds;
        oldSeconds = 0f;
        timerText = GetComponentInChildren<Text>();
    }

    void Update()
    {
        //　制限時間が0秒以下なら何もしない
        if (totalTime <= 0f)
        {
            return;
        }
        //　一旦トータルの制限時間を計測；
        totalTime = minute * 60 + seconds;
        totalTime -= Time.deltaTime;

        //　再設定
        minute = (int)totalTime / 60;
        seconds = totalTime - minute * 60;

        //　タイマー表示用UIテキストに時間を表示する
        if ((int)seconds != (int)oldSeconds)
        {
            timerText.text = minute.ToString("00") + ":" + ((int)seconds).ToString("00");

            if (totalTime <= 4f)
            {
                timerText.color = Color.red;
                timerText.fontSize = 50;
            }
        }
        oldSeconds = seconds;
        //　制限時間以下になったらコンソールに『制限時間終了』という文字列を表示する
        if (totalTime <= 0f)
        {
            
            GameOver.SendMessage("Lose");
        }
    }
}











//GameClearController.cs


//敵を全滅したらクリア画面に遷移

using UnityEngine;
using System.Collections;
using UnityEngine.SceneManagement;

public class GameClearController : MonoBehaviour
{

    // 配列（同じ種類の複数のデータを収納するための箱を作る）
    private GameObject[] enemyObjects;

    void Update()
    {

        // Enemyというタグが付いているオブジェクトのデータを箱の中に入れる。
        enemyObjects = GameObject.FindGameObjectsWithTag("Enemy");

        // データの入った箱の数をコンソール画面に表示する。
        print(enemyObjects.Length);

        // データの入った箱のデータが０に等しくなった時（Enemyというタグが付いているオブジェクトが全滅したとき）
        if (enemyObjects.Length == 0)
        {

            // ゲームクリアーシーンに遷移する。
            SceneManager.LoadScene("clear");
        }

    }
}











//GameEnd

using UnityEngine;
using System.Collections;
using UnityEngine.SceneManagement;

public class GameEnd : MonoBehaviour
{

    //　スタートボタンを押したら実行する
    public void End()
    {
        SceneManager.LoadScene("Title");
    }
}










//GameOverScript

using UnityEngine; 
 using UnityEngine.UI; 
 using System.Collections; 
 
 
 public class gameOverScript : MonoBehaviour
{ 
 	bool gameOverflg = false; 
 	 
 	void Start()
    {
               this.gameObject.GetComponent<Text>().enabled = false;
          } 
 	 
 	void Update()
    {
              if (gameOverflg == true)
        {
                      if (Input.GetMouseButtonDown(0))
            {
                              Application.LoadLevel("Title");
                          }
                  }
          } 
 	 
 	public void Lose()
    {
              this.gameObject.GetComponent<Text>().enabled = true;
              GameObject[] clones = GameObject.FindGameObjectsWithTag("Finish");
              foreach (GameObject obj in clones)
        {
                      Destroy(obj);
                  }
              gameOverflg = true;
          } 
 }











//GameSystem.cs

using UnityEngine;
using System.Collections;
using UnityEngine.SceneManagement;

public class GameSystem : MonoBehaviour
{

    //　スタートボタンを押したら実行する
    public void GameStart()
    {
        SceneManager.LoadScene("Game");
    }
}










//huwahuwa.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class huwahuwa : MonoBehaviour
{
    public float amplitude = 0.01f; // 振幅
    private int frameCnt = 0; // フレームカウント

    void Start()
    {
        iTween.MoveTo(gameObject, iTween.Hash("x", 1f, "y", 1f, "z", 1f, "time", 2f));
    }
    void FixedUpdate()
    {
        frameCnt += 1;
        if (10000 <= frameCnt)
        {
            frameCnt = 0;
        }
        if (0 == frameCnt % 2)
        {
            // 上下に振動させる（ふわふわを表現）
            float posYSin = Mathf.Sin(2.0f * Mathf.PI * (float)(frameCnt % 200) / (200.0f - 1.0f));
            iTween.MoveAdd(gameObject, new Vector3(0, amplitude * posYSin, 0), 0.0f);
        }
    }

}









//MainCtrl.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MainCtrl : MonoBehaviour
{
    // カメラオブジェクトを格納する変数
    public Camera mainCamera;
    // カメラの回転速度を格納する変数
    public Vector2 rotationSpeed;
    // マウス移動方向とカメラ回転方向を反転する判定フラグ
    public bool reverse;
    // マウス座標を格納する変数
    private Vector2 lastMousePosition;
    // カメラの角度を格納する変数（初期値に0,0を代入）
    private Vector2 newAngle = new Vector2(0, 0);

    // ゲーム実行中の繰り返し処理
    void Update()
    {
        // 左クリックした時
        if (Input.GetMouseButtonDown(1))
        {
            // カメラの角度を変数"newAngle"に格納
            newAngle = mainCamera.transform.localEulerAngles;
            // マウス座標を変数"lastMousePosition"に格納
            lastMousePosition = Input.mousePosition;
        }
        // 左ドラッグしている間
        else if (Input.GetMouseButton(1))
        {
            //カメラ回転方向の判定フラグが"true"の場合
            if (!reverse)
            {
                // Y軸の回転：マウスドラッグ方向に視点回転
                // マウスの水平移動値に変数"rotationSpeed"を掛ける
                //（クリック時の座標とマウス座標の現在値の差分値）
                newAngle.y -= (lastMousePosition.x - Input.mousePosition.x) * rotationSpeed.y;
                // X軸の回転：マウスドラッグ方向に視点回転
                // マウスの垂直移動値に変数"rotationSpeed"を掛ける
                //（クリック時の座標とマウス座標の現在値の差分値）
                newAngle.x -= (Input.mousePosition.y - lastMousePosition.y) * rotationSpeed.x;
                // "newAngle"の角度をカメラ角度に格納
                mainCamera.transform.localEulerAngles = newAngle;
                // マウス座標を変数"lastMousePosition"に格納
                lastMousePosition = Input.mousePosition;
            }
            // カメラ回転方向の判定フラグが"reverse"の場合
            else if (reverse)
            {
                // Y軸の回転：マウスドラッグと逆方向に視点回転
                newAngle.y -= (Input.mousePosition.x - lastMousePosition.x) * rotationSpeed.y;
                // X軸の回転：マウスドラッグと逆方向に視点回転
                newAngle.x -= (lastMousePosition.y - Input.mousePosition.y) * rotationSpeed.x;
                // "newAngle"の角度をカメラ角度に格納
                mainCamera.transform.localEulerAngles = newAngle;
                // マウス座標を変数"lastMousePosition"に格納
                lastMousePosition = Input.mousePosition;
            }
        }
    }

    // マウスドラッグ方向と視点回転方向を反転する処理
    public void DirectionChange()
    {
        // 判定フラグ変数"reverse"が"false"であれば
        if (!reverse)
        {
            // 判定フラグ変数"reverse"に"true"を代入
            reverse = true;
        }
        // でなければ（判定フラグ変数"reverse"が"true"であれば）
        else
        {
            // 判定フラグ変数"reverse"に"false"を代入
            reverse = false;
        }
    }
    
    
}





